import * as os from 'os';
import * as path from 'path';
import * as fs from 'fs-extra';
import { Project } from 'projen';
import {
  directorySnapshot,
  SnapshotOptions,
  SynthOutput,
} from 'projen/lib/util/synth';

/**
 * Creates a snapshot of the files generated by a project. Ignores any non-text
 * files so that the snapshots are human readable.
 */
export function synthSnapshot(
  project: Project,
  options: SnapshotOptions = {}
): SynthOutput {
  // defensive: verify that "outdir" is actually in a temporary directory
  if (
    !path.resolve(project.outdir).startsWith(os.tmpdir()) &&
    !project.outdir.includes('project-temp-dir')
  ) {
    throw new Error(
      'Trying to capture a snapshot of a project outside of tmpdir, which implies this test might corrupt an existing project'
    );
  }

  const synthed = Symbol.for('synthed');
  if (synthed in project) {
    throw new Error('duplicate synth()');
  }

  // eslint-disable-next-line no-param-reassign
  (project as any)[synthed] = true;

  const ENV_PROJEN_DISABLE_POST = process.env.PROJEN_DISABLE_POST;
  try {
    process.env.PROJEN_DISABLE_POST = 'true';
    project.synth();
    const ignoreExts = ['png', 'ico'];
    return directorySnapshot(project.outdir, {
      ...options,
      excludeGlobs: ignoreExts.map((ext) => `**/*.${ext}`),
    });
  } finally {
    fs.removeSync(project.outdir);

    // values assigned to process.env.XYZ are automatically converted to strings
    if (ENV_PROJEN_DISABLE_POST === undefined) {
      delete process.env.PROJEN_DISABLE_POST;
    } else {
      process.env.PROJEN_DISABLE_POST = ENV_PROJEN_DISABLE_POST;
    }
  }
}
